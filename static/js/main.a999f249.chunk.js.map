{"version":3,"sources":["NewNoteInput.tsx","App.tsx","actions.ts","reportWebVitals.ts","notesReducer.ts","store.ts","index.tsx"],"names":["NewNoteInput","addNote","React","useState","note","setNote","onChange","event","target","value","type","name","placeholder","onClick","App","notes","useSelector","state","dispatch","useDispatch","payload","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","store","createStore","action","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAOaA,EAA4C,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EAChDC,IAAMC,SAAS,IADiC,mBACjEC,EADiE,KAC3DC,EAD2D,KAYxE,OACE,gCACE,uBACEC,SAZa,SAACC,GAClBF,EAAQE,EAAMC,OAAOC,QAYjBA,MAAOL,EACPM,KAAK,OACLC,KAAK,OACLC,YAAY,SAEd,wBAAQC,QAdW,WACrBZ,EAAQG,GACRC,EAAQ,KAYN,0B,OCESS,MAxBf,WACE,IAAMC,EAAQC,aACZ,SAACC,GAAD,OAAWA,EAAMF,SAGbG,EAAWC,cAMjB,OACE,qCACE,cAAC,EAAD,CAAclB,QANA,SAACG,GACjBc,ECZmB,SAACd,GAAD,MAA2B,CAChDM,KAAM,WACNU,QAAShB,GDUEH,CAAQG,OAMf,uBACA,6BACGW,EAAMM,KAAI,SAACjB,GACV,OAAO,6BAAgBA,GAAPA,YETXkB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,uBCHRQ,EAAe,CACnBhB,MAAO,ICJIiB,EAAQC,aDOO,WAAsD,IAArDhB,EAAoD,uDAAjCc,EAAcG,EAAmB,uCAC/E,OAAOA,EAAOxB,MACZ,IAAK,WACH,OAAO,2BAAIO,GAAX,IAAkBF,MAAM,GAAD,mBAAME,EAAMF,OAAZ,CAAmBmB,EAAOd,YAEnD,QACE,OAAOH,MERbkB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJM,SAASC,eAAe,SAM1BjB,M","file":"static/js/main.a999f249.chunk.js","sourcesContent":["import { notEqual } from \"assert\";\nimport React, { ChangeEvent } from \"react\";\n\ninterface NewNoteInputProps {\n  addNote(note: string): void;\n}\n\nexport const NewNoteInput: React.FC<NewNoteInputProps> = ({ addNote }) => {\n  const [note, setNote] = React.useState(\"\");\n\n  const updateNote = (event: ChangeEvent<HTMLInputElement>) => {\n    setNote(event.target.value);\n  };\n\n  const onAddNoteClick = () => {\n    addNote(note);\n    setNote(\"\");\n  };\n\n  return (\n    <div>\n      <input\n        onChange={updateNote}\n        value={note}\n        type=\"text\"\n        name=\"note\"\n        placeholder=\"Note\"\n      />\n      <button onClick={onAddNoteClick}>Add note</button>\n    </div>\n  );\n}","import React from \"react\";\nimport { NewNoteInput } from \"./NewNoteInput\";\nimport { useSelector,useDispatch } from \"react-redux\";\nimport { NotesState } from \"./notesReducer\";\nimport { addNote } from './actions'\n\nfunction App() {\n  const notes = useSelector<NotesState, NotesState[\"notes\"]>(\n    (state) => state.notes\n  );\n  \n  const dispatch = useDispatch()\n\n  const onaddNote = (note:string) => {\n    dispatch(addNote(note))\n  }\n\n  return (\n    <>\n      <NewNoteInput addNote={onaddNote} />\n      <hr />\n      <ul>\n        {notes.map((note) => {\n          return <li key={note}>{note}</li>;\n        })}\n      </ul>\n    </>\n  );\n}\n\nexport default App;\n","export type Action = { type: \"ADD_NOTE\"; payload: string };\n\nexport const addNote = (note: string): Action => ({\n  type: \"ADD_NOTE\",\n  payload: note,\n});","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Action } from \"./actions\" \n\nexport interface NotesState {\n  notes: string[]\n}\n\nconst initialState = {\n  notes: []\n}\n\nexport const notesReducer = (state:NotesState = initialState, action: Action) => {\n  switch(action.type){\n    case \"ADD_NOTE\": {\n      return {...state, notes: [...state.notes, action.payload]}\n    }\n    default:\n      return state\n  }\n}","import { createStore } from 'redux'\nimport {notesReducer} from './notesReducer'\n\nexport const store = createStore(notesReducer)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\"\nimport {store} from './store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}